# This ML program checks how strong a user's password is. 

# We'll be using a labelled dataset from Kaggle to train our password strength checker model.
# The dataset contains 0.7 million passwords from Twitter and Microsoft.
# Data source: https://www.kaggle.com/datasets/bhavikbb/password-strength-classifier-dataset


import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer # tokenize and count for password
from sklearn.feature_extraction.text import TfidfVectorizer  #check for frequency and uniqueness of password
from sklearn.model_selection import train_test_split # train and test the model
from sklearn.ensemble import RandomForestClassifier # use ensemble learning to efficiently train the model

data = pd.read_csv("password.csv", on_bad_lines = 'skip') # skip lines with too many fields(columns)
print(data.head()) # display first few rows for data inspection
# pd.read is ideal for csv which returns a 2D data structure

# Convert 0,1 and 2 values in the strength column to weak, medium and strong below:

data = data.dropna() #removes the rows that contain null values
data["strength"] = data["strength"].map({0: "Weak", 1: "Medium", 2: "Strong"}) # remapping values

# Testing using a random sample of 5 rows
print(data.sample(5))

import warnings

warnings.filterwarnings("ignore")

#### Training the Model ####

# Tokenize and Split Data into training and test sets
def word(password):
    character = []
    for i in password:
        character.append(i)
    return character

x = np.array(data["password"]) # extract password column
y = np.array(data["strength"]) # extract strength column

tdif = TfidfVectorizer(tokenizer=word, token_pattern=r'\b\w+\b')

# tdif = TfidfVectorizer(tokenizer=word)
x = tdif.fit_transform(x) # fit the TfidfVectorizer on the input text data
# Allocate size of training and testing of dataset
xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.05,random_state=42) # random_state ensures same number of datasets are used for each test and train.

# Train a Classification Model to Predict Password Strength
model = RandomForestClassifier()
model.fit(xtrain,ytrain) # fit x&ytrain to model

print(model.score(xtest,ytest)) # calculate model fit


##### Main Program begins here ######
import getpass # allows us to enter a password in a command line program
user = getpass.getpass("Enter Password Here: ")
data = tdif.transform([user]).toarray()
output = model.predict(data)
print(output)
